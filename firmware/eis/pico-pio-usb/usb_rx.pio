
; Copyright (c) 2021 sekigon-gonnoc
; USB FS/LS NRZI receiver

.define public IRQ_RX_BS_ERR 1   ; bit stuffinc error
.define public IRQ_RX_EOP    2   ; eop detect flag
.define public IRQ_RX_START  3   ; packet start flag

.define SE0 0b00
.define BR 5              ; bit repeat counter

.define db0 0
.define db1 1

; USB receive program
; For Full-speed: run at 96MHz
; For Low-speed: run at 12MHz
; shift to left, autopull enable
; bit is captured from only pin0. pin1 is used to detect eop
; For Full-speed: pin0 is dp
; For Low-speed: pin0 is dm
.program usb_rx

.wrap_target
start:
    wait 1 pin 0 [7]
    wait 0 pin 0

read2to1:
    set y, BR
read1:
    jmp PIN H1
L1:
    set x, 0 [1]
    in x, 1  [1]
    jmp read1to2 [1]
H1:
    set x, 1 [2]
    in x, 1
    jmp y-- read1 [2]
    jmp PIN bs_err [6]

read1to2:
    set y, BR
read2:
    jmp PIN H2
L2:
    set x, 1 [3]
    in x, 1  [1]
    jmp y-- read2
    jmp read2to1 [6]	; ignore bitstuff
H2:
    set x, 0 [3]
    in x, 1
    jmp read2to1
eop:
bs_err:
    irq wait IRQ_RX_BS_ERR
.wrap


; USB receive program with debug pin
; For Full-speed: run at 96MHz
; For Low-speed: run at 12MHz
; shift to left, autopull enable
; bit is captured from only pin0. pin1 is used to detect eop
; For Full-speed: pin0 is dp
; For Low-speed: pin0 is dm
.program usb_rx_debug
.side_set 1

.wrap_target
start:
    wait 1 pin 0 [7]    side db0
    wait 0 pin 0 	    side db1

read2to1:
    set y, BR   side db1
read1:
    jmp PIN H1	side db1
L1:
    set x, 0 [1]	side db0
    in x, 1  [1]	side db1
    jmp read1to2 [1]	side db1
H1:
    set x, 1 [2]	side db0
    in x, 1     	side db1
    jmp y-- read1 [2]	side db1
    jmp PIN bs_err [6] side db1

read1to2:
    set y, BR   side db1
read2:
    jmp PIN H2	side db1
L2:
    set x, 1 [3]	side db0
    in x, 1  [1]    side db1
    jmp y-- read2 	side db1
    jmp read2to1 [6]	side db1            ; ignore bitstuff
H2:
    set x, 0 [3]	side db0
    in x, 1	side db1
    jmp read2to1   side db1
eop:
bs_err:
    irq wait IRQ_RX_BS_ERR side db0
.wrap

; EOP detect program
; For Full-speed: run at 96MHz
; For Low-speed: run at 12MHz
; autopull disable
; For Full-speed: pin0 is dp
; For Low-speed: pin0 is dm
.program eop_detect_pin0

.wrap_target
    wait 1 pin 0        ; wait dp is H to avoid catch previous EOP
    wait 0 pin 0
    irq IRQ_RX_START
start:
    set y, 1
    mov isr, null 
wait_se0:
    in pins, 2          ; read dp/dm
    mov x, isr 
    jmp x-- start       ; check se0
    jmp y-- wait_se0
    irq wait IRQ_RX_EOP ; eop is detected
.wrap

; EOP detect program
; autopull disable
.program eop_detect_pin0_debug
.side_set 1

.wrap_target
    wait 1 pin 0 side db1       ; wait dp is H to avoid catch previous EOP
    wait 0 pin 0 side db1
    irq IRQ_RX_START  side db0
start:
    set y, 1 side db0;
    mov isr, null side db0
wait_se0:
    in pins, 2 side db0         ; read dp/dm
    mov x, isr side db0
    jmp x-- start side db0      ; check se0
    jmp y-- wait_se0 side db0   ;
    irq wait IRQ_RX_EOP side db1         ; eop is detected
.wrap

; EOP detect program
.program eop_detect_pin1

.wrap_target
    wait 1 pin 1        ; wait dm is H to avoid catch previous EOP
    wait 0 pin 1
    irq IRQ_RX_START
start:
    set y, 1
    mov isr, null 
wait_se0:
    in pins, 2          ; read dp/dm
    mov x, isr 
    jmp x-- start       ; check se0
    jmp y-- wait_se0
    irq wait IRQ_RX_EOP ; eop is detected
.wrap

; EOP detect program with debug out
; run at 12MHz
; autopull disable
.program eop_detect_pin1_debug
.side_set 1

.wrap_target
    wait 1 pin 1 side db1       ; wait dm is H to avoid catch previous EOP
    wait 0 pin 1 side db1
    irq IRQ_RX_START  side db0
start:
    set y, 1 side db0;
    mov isr, null side db0
wait_se0:
    in pins, 2 side db0         ; read dp/dm
    mov x, isr side db0
    jmp x-- start side db0      ; check se0
    jmp y-- wait_se0 side db0   ;
    irq wait IRQ_RX_EOP side db1         ; eop is detected
.wrap

% c-sdk {
#include "hardware/clocks.h"

static void __no_inline_not_in_flash_func(usb_rx_configure_pins)(PIO pio, uint sm, uint data_pin) {
    pio_sm_set_in_pins(pio, sm, data_pin);
    pio->sm[sm].execctrl = (pio->sm[sm].execctrl & ~PIO_SM0_EXECCTRL_JMP_PIN_BITS) |
                (data_pin << PIO_SM0_EXECCTRL_JMP_PIN_LSB);
}

static void __no_inline_not_in_flash_func(usb_eop_configure_pins)(PIO pio, uint sm, uint pin_dp, uint pin_dm) {
    uint pin0 = pin_dp < pin_dm ? pin_dp : pin_dm;
    pio_sm_set_in_pins(pio, sm, pin0);
}

static inline void usb_rx_program_init(PIO pio, uint sm, uint offset, uint pin_dp, uint pin_dm, int pin_debug) {
    pio_sm_set_pindirs_with_mask(pio, sm, 0, (1 << pin_dp));
    pio_sm_set_pindirs_with_mask(pio, sm, 0, (1 << pin_dm));
    gpio_pull_down(pin_dp);
    gpio_pull_down(pin_dm);

    pio_sm_config c;

    if (pin_debug < 0) {
      c = usb_rx_program_get_default_config(offset);
    } else {
      c = usb_rx_debug_program_get_default_config(offset);

      pio_sm_set_pins_with_mask(pio, sm, 0, 1 << pin_debug);
      pio_sm_set_pindirs_with_mask(pio, sm, 1 << pin_debug, 1 << pin_debug);
      pio_gpio_init(pio, pin_debug);
      sm_config_set_sideset_pins(&c, pin_debug);
    }

    // Shift to right, autopull enabled, 8bit
    sm_config_set_in_shift(&c, true, true, 8);
    sm_config_set_fifo_join(&c, PIO_FIFO_JOIN_RX);

    // Run at 96Mhz
    // system clock should be multiple of 12MHz
    float div = (float)clock_get_hz(clk_sys) / (96000000);
    sm_config_set_clkdiv(&c, div);

    pio_sm_init(pio, sm, offset, &c);
    pio_sm_set_enabled(pio, sm, false);
}

static inline void eop_detect_program_init(PIO pio, uint sm, uint offset,
                                           uint pin_dp, uint pin_dm, bool is_fs, int pin_debug) {
  pio_sm_config c;

  if (pin_debug < 0) {
    c = eop_detect_pin0_program_get_default_config(offset);
  } else {
    c = eop_detect_pin0_debug_program_get_default_config(offset);
    pio_sm_set_pins_with_mask(pio, sm, 0, 1 << pin_debug);
    pio_sm_set_pindirs_with_mask(pio, sm, 1 << pin_debug, 1 << pin_debug);
    pio_gpio_init(pio, pin_debug);
    sm_config_set_sideset_pins(&c, pin_debug);
  }

  usb_eop_configure_pins(pio, sm, pin_dp, pin_dm);

  sm_config_set_in_shift(&c, false, false, 8);

  float div;
  if (is_fs) {
    div = (float)clock_get_hz(clk_sys) / (96000000);
  } else {
    div = (float)clock_get_hz(clk_sys) / (12000000);
  }

  sm_config_set_clkdiv(&c, div);

  pio_sm_init(pio, sm, offset, &c);
  pio_sm_set_enabled(pio, sm, true);
}

%}